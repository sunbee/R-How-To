environment(sum)
sum
is.null(environment(sum))
is.primitive(sum)
ls()
ls()
length(formals(mean))
sapply(funs, lenargs)
lenargs <- function(x) {
out <- formals(x)
somefun(out) # Replace somefun
}
lenargs(mean) == 2 # Test it!
lenargs <- function(x) {
out <- formals(x)
length(out) # Replace somefun
}
lenargs(mean) == 2 # Test it!
sapply(funs, lenargs)
max(sapply(funs, lenargs))
lenargs(mean) == 2
lens <- sapply(funs, lenargs)
max(lens)
which(lens == max(lens))
sum(lens==0)
prims <- Filter(is.primitive, funs)
prims
length(prims)
?ver
?version
R.Version()
R.version
f <- function() {
x <- 1
y <- 7
c(x, y)
}
f()
rm(f)
rm(x, g)
x <- 1
h <- function() {
y <- 7
i <- function() {
z <- 9
c(x, y, z)
}
i()
}
h()
x
rm(x)
x
x = 1
x
j <- function(x) {
y <- 4
f <- function() {
c(x, y)
}
}
j <- function(x) {
y <- 4
f <- function() {
c(x, y)
}
}
j <- function(x) {
y <- 4
f <- function() {
c(x, y)
}
}
k <- j(7)
p <- j(9)
j <- function(x) {
y <- 4
f <- function() {
c(x, y)
}
}
k <- j(7)
p <- j(9)
k()
p()
rm(a)
a
j <- function() {
if(!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
j()
`(` <- function(x) {
if (is.numeric(x) && runif(1) < 0.10) {
x + 1
} else {
x
}
}
`(` <- function(x) {
if (is.numeric(x) && runif(1) < 0.10) {
x + 1
} else {
x
}
}
(3)
(3)
(3)
(3)
`(` <- function(x) {
if (is.numeric(x) && runif(1) < 0.50) {
x + 1
} else {
x
}
}
(3)
(3)
(3)
(3)
`(` <- function(x) {
if (is.numeric(x) && runif(1) < 0.50) {
x + 1
} else {
x
}
}
(3)
replicate(100, (3))
c <- 10
c(c=c)
f <- function(x) {
f <- function(x) {
f <- function(x) {
x ^ 2
}
f(x) + 1
}
f(x) * 2
}
f(10)
philcit <- subset(phil, Name=="Philadelphia County")
# Overlay - stack
ggplot(philcit, aes(Level, value, fill=Gender)) +
geom_bar(stat="identity", position="stack")
library(ggplot2)
philcit <- subset(phil, Name=="Philadelphia County")
# Overlay - stack
ggplot(philcit, aes(Level, value, fill=Gender)) +
geom_bar(stat="identity", position="stack")
# Overlay - dodge
ggplot(philcit, aes(Level, value, fill=Gender)) +
geom_bar(stat="identity", position="dodge")
# Overlay - fill
ggplot(philcit, aes(Level, value, fill=Gender)) +
geom_bar(stat="identity", position="fill")
# Overlay - identity
ggplot(philcit, aes(Level, value, fill="Gender")) +
geom_bar(stat="identity", position="identity", alpha=0.3)
str(ay)
summary(ay)
head(ay)
tail(ay)
ggplot(ay, aes(F1, fill=VClass)) +
stat_density()
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(position="stack")
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y=..count..), position="stack")
x <- 10; y <- 5;
x + y
`+`(x, y)
for (i in 1:2) { print(i) }
?for
()
?`for`
`for`(i, 1:2, print(i))
if (i == 1) {
print("yes!")
} else {
print("no!")
}
i
`if`(i==1, print("yes!"), print("no!"))
x <- 1:12
x[3]
`[`(1:12, 3)
`[`(x, 3)
{print(1), print(2), print(3)}
{ print(1); print(2); print(3)}
`{`(print(1), print(2), print(3) )
add <- function(x, y) {
x + y
}
sapply(1:12, add, 3)
sapply(1:12, `+`, 3)
sapply(1:12, "+", 3)
f <- function(abcdefg, bcde, bcdefg) {
list(a=abcdefg, b=bcde, c=bcdefg)
}
str(f(1, 2, 3))
str(f(2, 3, abcdefg=1))
str(f(2, 3, ab=1))
str(f(2, 3, b=1))
mean(1:10)
?mean
mean(x=1:10, trim=0.5)
mean(x=1.5:10, trim=0.5)
mean(x=1.6:10, trim=0.5)
mean(1:10, n=T)
mean(, TRUE, x=c(1:10, NA))
args <- list(1:12, na.rm=TRUE)
class(args)
mean(1:12, na.rm=TRUE)
do.call(mean, args)
f <- function(a=1, b=7) {
c(a, b)
}
f <- function(a=1, b=7) {
c(a, b)
}
h <- function(a=7, b=d) {
d <- (a^2) + 4
c(a, b)
}
h()
f <- function(x) {
10
}
f()
stop("This is an error!")
f(stop("This is an error!"))
f <- function(x) {
x
10
}
f(stop("This is an error!"))
f <- function(x) {
force(x)
10
}
f(stop("This is an error!"))
i <- function(a, b) {
}
i()
i <- function(a, b) {
a
}
i()
i <- function(a, b) {
c(missing(a), missing(b))
}
i()
i(a=1)
i(a=1, b=7)
i(7, 9)
add <- function(x) {
function(y) y + x
}
adders <- lapply(1:10, add, 3)
add <- function(x) {
function(y) y + x
}
adders <- lapply(1:10, add, 3)
adders <- lapply(1:10, add)
adders
adders <- lapply(1:10, add(3))
adders
adders <- lapply(1:10, add)
adders <- lapply(1:10, add, 3)
add <- function(x) {
function(y) y + x
}
adders <- lapply(1:10, add)
adders[[1]]
adders[[2]]
adders[[10]](3)
adders[[1]](3)
ls()
f <- function(x=ls()) {
a <- 9
x
}
f()
x
!is.null(x) && x > 0
rm(x)
is.null(x)
x <- NULL
!is.null(x) && x > 0
x > 0 &&  !is.null(x)
rm(x)
x <- NULL
!is.null(x) && x > 0
x > 0 &&  !is.null(x)
plot(1:5, col="red")
plot(1:5, type="o", cex=5, pch=20)
?plot
formals(plot)
formals(plot)
formals(plot)
f <- function(...) {
list(...)
}
f(a=1, b=5)
?sum
?mean
sum(3, 5, na.mr=FALSE)
x <- sample(replace=TRUE, 20, x=c(1:10, NA))
x
?sample
x<-sample(c(1:10, NA), 20, replace=TRUE)
set.seed(7)
runif(10)
runif(10)
set.seed(7)
runif(10)
?runif
cor(m="k", y=y, u="p", x=x)
x
y
x <- sample(replace=TRUE, 20, x=c(1:10, NA))
y<-runif(20,min=0,max=1) # Harika
x <- sample(replace=TRUE, 20, x=c(1:10, NA))
y<-runif(20,min=0,max=1) # Harika
cor(m="k", y=y, u="p", x=x)
?cor
cor(x,y,method="kendall", use="pairwise.complete.obs")
f1 <- function(x={ y <-1; 2 }, y=0) {
x + y
}
f1()
f2 <- function(x=z) {
z <- 100
x
}
f2()
x= { y <- 1; 2 }
y
x
{ y <- 1; 2 }
f <- function() {
print(1)
y < - 2;
?cor
9
}
f <- function() {
print(1)
y < - 2;
?cor
9
}
f()
y
{
print(1)
y < - 2;
?cor
9
}
y
f <- function() {
print(1)
y <- 2;
?cor
9
}
f()
y
{
print(1)
y <- 2;
?cor
9
}
y
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..count..), position="stack")
library(ggplot2)
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..count..), position="stack")
# Overlay - stack
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..count..), position="stack", color="black")
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..count..), position="fill", color="black")
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(, position="fill", color="black")
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..count..), position="fill", color="black")
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(, position="fill", color="black")
summary(ay)
head(ay)
tail(ay)
summary(ay)
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..count..), position="identity", color="black", alpha=0.5)
stat_density(aes(y = ..density..), position="identity", color="black", alpha=0.5)
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..density..), position="identity", color="black", alpha=0.5)
ggplot(ay, aes(-F2, reorder(VClass, -F2, mean))) +
geom_point(position="jitter", alpha=0.3)
ggplot(jean, aes(-F2, reorder(VClass, -F2, mean))) +
geom_point(position="jitter", alpha=0.3)
ggplot(jean, aes(reorder(VClass, -F1, mean), -F1)) +
geom_point(position="jitter", alpha=0.5)
ggplot(jean, aes(reorder(VClass, -F1, mean), -F1)) +
geom_point(position="jitter", alpha=0.5) +
geom_boxplot()
ggplot(jean, aes(reorder(VClass, -F1, mean), -F1)) +
geom_point(position="jitter", alpha=0.5) +
geom_boxplot(alpha=0.2)
geom_point(position="jitter", alpha=0.5) +
geom_boxplot(alpha=0.9)
ggplot(jean, aes(reorder(VClass, -F1, mean), -F1)) +
geom_point(position="jitter", alpha=0.5) +
geom_boxplot(alpha=0.9)
donner <- read.csv("http://www.ling.upenn.edu/~joseff/data/donner.csv")
summary(donner)
stat_density(aes(y = ..count..), position="fill", color="black")
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..count..), position="stack", color="black")
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..count..), position="dodge", color="black")
ggplot(ay, aes(F1, fill=VClass)) +
stat_density(aes(y = ..count..), position="fill", color="black")
ggplot(donner, aes(AGE, NFATE, color=GENDER)) +
geom_point(position="jitter") +
stat_smooth(method="glm", family="binomial", formula = y~poly(x,2))
ggplot(donner, aes(AGE, NFATE, color=GENDER)) +
geom_point(position=position_jitter(height=0.02, width=0)) +
stat_smooth(method="glm", family="binomial", formula = y~poly(x,2))
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth() +
facet_wrap(~year)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~manufacturer)
?tips
ggplot(tips, aes(size, tip/total_bill)) +
geom_point(position=position_jitter(width=0.2, height=0)) +
facet_grid(time ~ sex)
datasets::tips
library(reshape2)
ggplot(tips, aes(size, tip/total_bill)) +
geom_point(position=position_jitter(width=0.2, height=0)) +
facet_grid(time ~ sex)
ggplot(data=gender.comp, aes(Male, Female)) +
geom_abline(color="grey80") +
geom_point(alpha=0.6) +
facet_wrap(~ Measure, scales="free")
?gender.comp
ggplot(mtcars, aes(mpg, wt)) +
geom_point(alpha=0.6) +
facet_wrap(am ~ vs)
facet_wrap(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_point(alpha=0.6) +
facet_wrap(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_area(alpha=0.6) +
facet_wrap(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_area(alpha=0.6) + geom_point()
facet_wrap(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_area(alpha=0.6) + geom_point()
facet_wrap(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_point()
facet_wrap(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_wrap(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_grid(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_wrap(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_grid(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_wrap(am ~ vs, scales="free_x")
ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_grid(am ~ vs, scales="free_x")
library(data.table)
library(testthat)
library(ggplot2)
setwd("c:/Users/ssbhat3/Desktop/R-How-To")
getwd()
# Source: http://www.fec.gov/disclosurep/PDownload.do
library(data.table)
library(testthat)
library(ggplot2)
DTcand <- data.table(read.csv("P00000001-ALL_.csv", header=TRUE, stringsAsFactors=FALSE))
str(DTcand)
uniqueCand <- DTcand[, unique(cand_nm)]
test_that("Spreadsheet is loaded into table that meets parameters")
DTcand
